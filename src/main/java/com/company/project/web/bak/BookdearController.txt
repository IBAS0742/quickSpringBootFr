package com.company.project.web.bak;
import com.company.project.core.Result;
import com.company.project.core.ResultGenerator;
import com.company.project.model.Bookdear;
import com.company.project.service.BookdearService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Condition;

import javax.annotation.Resource;
import java.util.Date;
import java.util.List;

/**
* Created by CodeGenerator on 2017/08/01.
*/
@RestController
@RequestMapping("/bookdear")
public class BookdearController {
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    @Resource
    private BookdearService bookdearService;

    @PostMapping("/add")
    public Result add(@RequestParam(defaultValue = "") String token,
                      @RequestParam Long uId,
                      Bookdear bookdear) {
        if (checkToken(uId,token)) {
            Long t = (new Date()).getTime();
            bookdear.setCtime(t.toString());
            bookdearService.save(bookdear);
            return ResultGenerator.genSuccessResult();
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    @PostMapping("/addRetId")
    public Result addRetId(@RequestParam(defaultValue = "") String token,
                           @RequestParam Long uId,
                           Bookdear bookdear) {
        if (checkToken(uId,token)) {
            Long t = (new Date()).getTime();
            bookdear.setCtime(t.toString());
            bookdearService.insertRetId(bookdear);
            return ResultGenerator.genSuccessResult(bookdear);
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    @PostMapping("/delete")
    public Result delete(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         @RequestParam Integer id) {
        if (checkToken(uId,token)) {
            bookdearService.deleteById(id);
            return ResultGenerator.genSuccessResult();
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    @PostMapping("/update")
    public Result update(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         Bookdear bookdear) {
        if (checkToken(uId,token)) {
            bookdearService.update(bookdear);
            return ResultGenerator.genSuccessResult();
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    @PostMapping("/detail")
    public Result detail(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         @RequestParam Integer id) {
        if (checkToken(uId,token)) {
            Bookdear bookdear = bookdearService.findById(id);
            return ResultGenerator.genSuccessResult(bookdear);
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    @PostMapping("/list")
    public Result list(@RequestParam(defaultValue = "0") String uper,
                       @RequestParam(defaultValue = "0") Integer page,
                       @RequestParam(defaultValue = "0") Integer size) {
        if (uper.equals("ibas0742")) {
            PageHelper.startPage(page, size);
            List<Bookdear> list = bookdearService.findAll();
            PageInfo pageInfo = new PageInfo(list);
            return ResultGenerator.genSuccessResult(pageInfo);
        } else {
            return ResultGenerator.genFailResult("没有权限");
        }
    }

    //根据条件进行查找 ex => data : { id : 12 }
    @PostMapping("/listBy")
    public Result listBy(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         @RequestParam(defaultValue = "0") Integer page,
                         @RequestParam(defaultValue = "0") Integer size) {
        if (checkToken(uId,token)) {
            Condition condition = new Condition(Bookdear.class);
            condition.createCriteria().andEqualTo("fromId",uId);
            condition.or(condition.createCriteria().andEqualTo("toId",uId));
            PageHelper.startPage(page, size);
            List<Bookdear> list = bookdearService.findByCondition(condition);
            PageInfo pageInfo = new PageInfo(list);
            return ResultGenerator.genSuccessResult(pageInfo);
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
    }

    private boolean checkToken(Long uId,String token){
        String token_ = (String)stringRedisTemplate.opsForHash().get("token",uId.toString());
        return token.equals(token_);
    }
}
