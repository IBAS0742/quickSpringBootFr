package com.company.project.web;
import com.company.project.core.Result;
import com.company.project.core.ResultGenerator;
import com.company.project.model.Faver;
import com.company.project.service.FaverService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Condition;

import javax.annotation.Resource;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
* Created by CodeGenerator on 2017/08/09.
*/
@RestController
@RequestMapping("/faver")
public class FaverController {
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    @Resource
    private FaverService faverService;

//    @PostMapping("/add")
//    public Result add(Faver faver) {
//        faverService.save(faver);
//        return ResultGenerator.genSuccessResult();
//    }

    @PostMapping("/addRetId")
    public Result addRetId(@RequestParam(defaultValue = "") String token,
                           Faver faver) {
        if (faver.getUid() == 0 || faver.getBookid() == 0) {
            return ResultGenerator.genFailResult("信息不全");
        }
        if (checkToken(faver.getUid(),token)) {} else {
            return ResultGenerator.genFailResult("没有权限");
        }
        faverService.insertRetId(faver);
        return ResultGenerator.genSuccessResult(faver);
    }

    @PostMapping("/delete")
    public Result delete(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         @RequestParam Long id) {
        if (checkToken(uId,token)) {} else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        Condition condition = new Condition(Faver.class);
        condition.createCriteria().andEqualTo("uid",uId);
        condition.createCriteria().andEqualTo("id",id);
        faverService.deleteByCondition(condition);
        return ResultGenerator.genSuccessResult();
    }

//    @PostMapping("/update")
//    public Result update(Faver faver) {
//        faverService.update(faver);
//        return ResultGenerator.genSuccessResult();
//    }
//
//    @PostMapping("/detail")
//    public Result detail(@RequestParam Long id) {
//        Faver faver = faverService.findById(id);
//        return ResultGenerator.genSuccessResult(faver);
//    }

    @PostMapping("/list")
    public Result list(@RequestParam(defaultValue = "") String token,
                       @RequestParam Long uId) {
        if (checkToken(uId,token)) {} else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        Condition condition = new Condition(Faver.class);
        condition.createCriteria().andEqualTo("uid",uId);
        List<Faver> list = faverService.findByCondition(condition);
        return ResultGenerator.genSuccessResult(list);
    }

    //根据条件进行查找 ex => data : { id : 12 }
//    @PostMapping("/listBy")
//    public Result listBy(@RequestParam Map<String,String> cond, @RequestParam(defaultValue = "0") Integer page, @RequestParam(defaultValue = "0") Integer size) {
//        Condition condition = new Condition(Faver.class);
//        Iterator<String> keys = cond.keySet().iterator();
//        while (keys.hasNext()) {
//            String k = keys.next();
//            if (k.equals("page") || k.equals("size")) {
//                continue;
//            }
//            condition.createCriteria().andEqualTo(k,cond.get(k));
//        }
//        PageHelper.startPage(page, size);
//        List<Faver> list = faverService.findByCondition(condition);
//        PageInfo pageInfo = new PageInfo(list);
//        return ResultGenerator.genSuccessResult(pageInfo);
//    }

    private boolean checkToken(Long uId,String token){
        String token_ = (String)stringRedisTemplate.opsForHash().get("token",uId.toString());
        return token_ != null && token.equals(token_);
    }
}
