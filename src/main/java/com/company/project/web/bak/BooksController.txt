package com.company.project.web.bak;
import com.company.project.core.Result;
import com.company.project.core.ResultGenerator;
import com.company.project.model.Books;
import com.company.project.service.BooksService;
import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import tk.mybatis.mapper.entity.Condition;

import javax.annotation.Resource;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
* Created by CodeGenerator on 2017/08/01.
*/
@RestController
@RequestMapping("/books")
public class BooksController {
    @Autowired
    private StringRedisTemplate stringRedisTemplate;
    @Resource
    private BooksService booksService;

    @PostMapping("/add")
    public Result add(@RequestParam(defaultValue = "") String token,
                      @RequestParam Long uId,
                      Books books) {
        if (checkToken(uId,token)) {
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        books.setUid(uId);
        books.setLiving(0);
        books.setSailstatus(0);
        booksService.save(books);
        return ResultGenerator.genSuccessResult();
    }

    @PostMapping("/addRetId")
    public Result addRetId(@RequestParam(defaultValue = "") String token,
                           @RequestParam Long uId,
                           Books books) {
        if (checkToken(uId,token)) {
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        books.setUid(uId);
        books.setLiving(0);
        books.setSailstatus(0);
        booksService.insertRetId(books);
        return ResultGenerator.genSuccessResult(books);
    }

    @PostMapping("/delete")
    public Result delete(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         @RequestParam Integer id) {
        if (checkToken(uId,token)) {
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        booksService.deleteById(id);
        return ResultGenerator.genSuccessResult();
    }

    @PostMapping("/update")
    public Result update(@RequestParam(defaultValue = "") String token,
                         @RequestParam Long uId,
                         Books books) {
        if (checkToken(uId,token)) {
        } else {
            return ResultGenerator.genFailResult("请先登陆");
        }
        booksService.update(books);
        return ResultGenerator.genSuccessResult();
    }

    @PostMapping("/detail")
    public Result detail(@RequestParam Integer id) {
        Books books = booksService.findById(id);
        return ResultGenerator.genSuccessResult(books);
    }

    @PostMapping("/list")
    public Result list(@RequestParam(defaultValue = "0") Integer page, @RequestParam(defaultValue = "0") Integer size) {
        PageHelper.startPage(page, size);
        List<Books> list = booksService.findAll();
        PageInfo pageInfo = new PageInfo(list);
        return ResultGenerator.genSuccessResult(pageInfo);
    }

    //根据条件进行查找 ex => data : { id : 12 }
    @PostMapping("/listBy")
    public Result listBy(@RequestParam Map<String,String> cond, @RequestParam(defaultValue = "0") Integer page, @RequestParam(defaultValue = "0") Integer size) {
        Condition condition = new Condition(Books.class);
        Iterator<String> keys = cond.keySet().iterator();
        while (keys.hasNext()) {
            String k = keys.next();
            if (k.equals("page") || k.equals("size")) {
                continue;
            }
            condition.createCriteria().andEqualTo(k,cond.get(k));
        }
        PageHelper.startPage(page, size);
        List<Books> list = booksService.findByCondition(condition);
        PageInfo pageInfo = new PageInfo(list);
        return ResultGenerator.genSuccessResult(pageInfo);
    }

    private boolean checkToken(Long uId,String token){
        String token_ = (String)stringRedisTemplate.opsForHash().get("token",uId.toString());
        return token.equals(token_);
    }
}
